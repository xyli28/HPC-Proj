##########################################################################
# this script was generated by openmm-builder. to customize it further,
# you can save the file to disk and edit it with your favorite editor.
##########################################################################

from __future__ import print_function
from simtk.openmm import app
import simtk.openmm as mm
from simtk import unit
from sys import stdout

pdb = app.PDBFile('argon_gcmc.pdb')
forcefield = app.ForceField('argon.xml')

system = forcefield.createSystem(pdb.topology, nonbondedMethod=app.CutoffPeriodic, 
    nonbondedCutoff=0.85125*unit.nanometers)

integrator = mm.LangevinIntegrator(88.9407*unit.kelvin, 1.0/unit.picoseconds, 
    2.0*unit.femtoseconds)
integrator.setConstraintTolerance(0.00001)

platform = mm.Platform.getPlatformByName('CUDA')
properties = {'CudaPrecision': 'mixed'}
simulation = app.Simulation(pdb.topology, system, integrator, platform, 
    properties)
simulation.context.setPositions(state.getPositions())

#print('Minimizing...')
#simulation.minimizeEnergy()

simulation.context.setVelocitiesToTemperature(88.9407*unit.kelvin)
#print('Equilibrating...')
#simulation.step(1000)

simulation.reporters.append(app.DCDReporter('argon_cluster.dcd', 10))
simulation.reporters.append(app.PDBReporter('argon_cluster_out.pdb', 100000))
simulation.reporters.append(app.StateDataReporter(stdout, 1000, step=True, 
    time=True, potentialEnergy=True, kineticEnergy=True, temperature=True, 
    volume=True, density=True, speed=True, separator='\t'))

print('Running Production...')
simulation.step(20000)
print('Done!')

