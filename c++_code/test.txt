g++ -g -std=c++11 -Wall -Wextra -Wsign-conversion -Wsign-compare -O3 -I/home/xli646/local/openmm/include argon.cpp -L/home/xli646/local/openmm/lib -lOpenMM -o argon
In file included from /home/xli646/local/openmm/include/openmm/BrownianIntegrator.h:35:0,
                 from /home/xli646/local/openmm/include/OpenMM.h:36,
                 from Gcmc.h:2,
                 from argon.cpp:22:
/home/xli646/local/openmm/include/openmm/Integrator.h:117:18: warning: unused parameter ‘changed’ [-Wunused-parameter]
     virtual void stateChanged(State::DataType changed) {
                  ^
In file included from /home/xli646/local/openmm/include/openmm/Context.h:37:0,
                 from /home/xli646/local/openmm/include/openmm/GayBerneForce.h:35,
                 from /home/xli646/local/openmm/include/OpenMM.h:53,
                 from Gcmc.h:2,
                 from argon.cpp:22:
/home/xli646/local/openmm/include/openmm/System.h: In member function ‘bool OpenMM::System::isVirtualSite(int) const’:
/home/xli646/local/openmm/include/openmm/System.h:127:72: warning: conversion to ‘std::vector<OpenMM::VirtualSite*>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         return (index < (int) virtualSites.size() && virtualSites[index] != NULL);
                                                                        ^
In file included from /home/xli646/local/openmm/include/openmm/GayBerneForce.h:35:0,
                 from /home/xli646/local/openmm/include/OpenMM.h:53,
                 from Gcmc.h:2,
                 from argon.cpp:22:
/home/xli646/local/openmm/include/openmm/Context.h: At global scope:
/home/xli646/local/openmm/include/openmm/Context.h:127:73: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
     State getState(int types, bool enforcePeriodicBox=false, int groups=0xFFFFFFFF) const;
                                                                         ^
In file included from /home/xli646/local/openmm/include/OpenMM.h:53:0,
                 from Gcmc.h:2,
                 from argon.cpp:22:
/home/xli646/local/openmm/include/openmm/GayBerneForce.h: In constructor ‘OpenMM::GayBerneForce::ParticleInfo::ParticleInfo(double, double, int, int, double, double, double, double, double, double)’:
/home/xli646/local/openmm/include/openmm/GayBerneForce.h:286:19: warning: ‘OpenMM::GayBerneForce::ParticleInfo::epsilon’ will be initialized after [-Wreorder]
     double sigma, epsilon, sx, sy, sz, ex, ey, ez;
                   ^
/home/xli646/local/openmm/include/openmm/GayBerneForce.h:285:9: warning:   ‘int OpenMM::GayBerneForce::ParticleInfo::xparticle’ [-Wreorder]
     int xparticle, yparticle;
         ^
/home/xli646/local/openmm/include/openmm/GayBerneForce.h:291:5: warning:   when initialized here [-Wreorder]
     ParticleInfo(double sigma, double epsilon, int xparticle, int yparticle, double sx, double sy, double sz, double ex, double ey, double ez) :
     ^
argon.cpp: At global scope:
argon.cpp:126:15: warning: missing initializer for member ‘MyAtomInfo::pdb’ [-Wmissing-field-initializers]
      EndOfList};
               ^
argon.cpp:126:15: warning: missing initializer for member ‘MyAtomInfo::initPosInAng’ [-Wmissing-field-initializers]
argon.cpp:126:15: warning: missing initializer for member ‘MyAtomInfo::posInAng’ [-Wmissing-field-initializers]
argon.cpp:157:1: warning: unused parameter ‘atoms’ [-Wunused-parameter]
 myWritePDBFrame(int frameNum, double timeInPs, double energyInKJ, 
 ^
argon.cpp: In constructor ‘MyOpenMMData::MyOpenMMData()’:
argon.cpp:194:23: warning: ‘MyOpenMMData::context’ will be initialized after [-Wreorder]
     OpenMM::Context*  context;
                       ^
argon.cpp:193:29: warning:   ‘OpenMM::Integrator* MyOpenMMData::integrator’ [-Wreorder]
     OpenMM::Integrator*     integrator;
                             ^
argon.cpp:190:5: warning:   when initialized here [-Wreorder]
     MyOpenMMData() : system(0), context(0), integrator(0), nonbond(0) {}
     ^
argon.cpp: In function ‘void myGetOpenMMState(MyOpenMMData*, bool, double&, double&, MyAtomInfo*)’:
argon.cpp:358:64: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
     const OpenMM::State state = omm->context->getState(infoMask);
                                                                ^
argon.cpp:365:51: warning: conversion to ‘std::vector<OpenMM::Vec3>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             atoms[i].posInAng[j] = positionsInNm[i][j] * OpenMM::AngstromsPerNm;
                                                   ^
argon.cpp: At global scope:
argon.cpp:157:1: warning: ‘void myWritePDBFrame(int, double, double, const MyAtomInfo*)’ defined but not used [-Wunused-function]
 myWritePDBFrame(int frameNum, double timeInPs, double energyInKJ, 
 ^
